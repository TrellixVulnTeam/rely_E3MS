import java.util.*;

public class NearestRestaurant {

		  // @include
		  public static List<BinaryTree<Integer>> rangeQueryOnBST(
		      BinaryTree<Integer> n, Integer L, Integer U) {
			  
			  
		  }

		  
		  
		  // @exclude

		  public static void main(String[] args) {
		    // 3
		    // 2 5
		    // 1 4 6
		    BinaryTree<Integer> root = new BinaryTree<>(3, null, null);
		    root.setLeft(new BinaryTree<>(2, null, null));
		    root.getLeft().setParent(root);
		    root.getLeft().setLeft(new BinaryTree<>(1, null, null));
		    root.getLeft().getLeft().setParent(root.getLeft());
		    root.setRight(new BinaryTree<>(5, null, null));
		    root.getRight().setParent(root);
		    root.getRight().setLeft(new BinaryTree<>(4, null, null));
		    root.getRight().getLeft().setParent(root.getRight());
		    root.getRight().setRight(new BinaryTree<>(6, null, null));
		    root.getRight().getRight().setParent(root.getRight());
		    List<BinaryTree<Integer>> res = rangeQueryOnBST(root, 2, 5);
		    assert (res.size() == 4);
		    for (BinaryTree<Integer> l : res) {
		      assert (l.getData() >= 2 && l.getData() <= 5);
		    }
		    res = rangeQueryOnBST(root, -1, 0);
		    assert (res.isEmpty());
		    res = rangeQueryOnBST(root, 10, 25);
		    assert (res.isEmpty());
		    res = rangeQueryOnBST(root, -10, 30);
		    assert (res.size() == 6);
		    for (BinaryTree<Integer> l : res) {
		      assert (l.getData() >= 1 && l.getData() <= 6);
		    }
		  }
}
